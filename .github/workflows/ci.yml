on: 
    pull_request:
      branches: [ master ]
    push:
      branches: [ master ]
name: ci/github
jobs:
    unit:
        strategy:
          matrix:
            go-version: [1.15.x]
            os: [ubuntu-latest]
        runs-on: ${{ matrix.os }}
        steps:
        - name: Install Go
          uses: actions/setup-go@v2
          with:
            go-version: ${{ matrix.go-version }}
        - name: Check out code
          uses: actions/checkout@v2
        - name: Build
          run: make build
        - name: Test
          run: make test-unit-coverage
    integration:
        strategy:
          fail-fast: false
          matrix:
            go-version: [1.15.x]
            os: [ubuntu-latest]
            kubernetes:
              # Only v1.18 is currently enabled because of the flakiness in the tests, specifically API calls failing with "etcdserver: request timed out"
              #- v1.17.17
              - v1.18.15
              #- v1.19.7
              #- v1.20.2
          max-parallel: 1
        runs-on: ${{ matrix.os }}
        steps:
        - name: Install Go
          uses: actions/setup-go@v2
          with:
            go-version: ${{ matrix.go-version }}
        - name: Check out code
          uses: actions/checkout@v2
        - name: Install kubectl
          uses: azure/setup-kubectl@v1
          with:
            version: ${{ matrix.kubernetes }}
        - name: Create kind cluster
          uses: helm/kind-action@v1.1.0
          with:
            version: v0.10.0
            node_image: kindest/node:${{ matrix.kubernetes }}
            cluster_name: kind
            wait: 120s
        - name: Verify kind cluster
          run: |
            echo "# Using KinD context..."
            kubectl config use-context "kind-kind"
            echo "# KinD nodes:"
            kubectl get nodes
        - name: Install Tekton
          run: |
            make kind-tekton
        - name: Test
          run: make test-integration
    e2e:
        strategy:
          fail-fast: false
          matrix:
            go-version: [1.15.x]
            os: [ubuntu-latest]
            kubernetes:
              # Only v1.18 is currently enabled because of the flakiness in the tests, specifically API calls failing with "etcdserver: request timed out"
              #- v1.17.17
              - v1.18.15
              #- v1.19.7
              #- v1.20.2
          max-parallel: 2
        runs-on: ${{ matrix.os }}
        steps:
        - name: Install Go
          uses: actions/setup-go@v2
          with:
            go-version: ${{ matrix.go-version }}
        - name: Check out code
          uses: actions/checkout@v2
        - name: Install kubectl
          uses: azure/setup-kubectl@v1
          with:
            version: ${{ matrix.kubernetes }}
        - name: Create kind cluster
          uses: helm/kind-action@v1.1.0
          with:
            version: v0.10.0
            node_image: kindest/node:${{ matrix.kubernetes }}
            cluster_name: kind
            wait: 120s
        - name: Verify kind cluster
          run: |
            echo "# Using KinD context..."
            kubectl config use-context "kind-kind"
            echo "# KinD nodes:"
            kubectl get nodes
        - name: Install Tekton
          run: |
            make kind-tekton
            kubectl -n tekton-pipelines rollout status deployment tekton-pipelines-controller --timeout=1m
            kubectl -n tekton-pipelines rollout status deployment tekton-pipelines-webhook --timeout=1m
        - name: Install Registry
          run: |
            kubectl apply -f test/data/registry.yaml
            kubectl -n registry rollout status deployment registry --timeout=1m
        - name: Install ko
          run: curl -fsL https://github.com/google/ko/releases/download/v0.8.1/ko_0.8.1_Linux_x86_64.tar.gz | sudo tar xzf - -C /usr/local/bin ko
        - name: Install Shipwright Build
          run: |
            make install-operator-kind
            kubectl -n build-operator rollout status deployment build-operator --timeout=1m || true
        - name: Test
          run: TEST_E2E_OPERATOR=managed_outside TEST_NAMESPACE=build-operator TEST_IMAGE_REPO=registry.registry.svc.cluster.local:32222/shipwright-io/build-e2e make test-e2e
        - name: Build operator logs
          if: ${{ failure() }}
          run: |
            echo "# Pods:"
            kubectl -n build-operator get pod
            PODS=$(kubectl -n build-operator get pod -o json)
            POD_NAME=$(echo "${PODS}" | jq -r '.items[] | select(.metadata.name | startswith("build-operator-")) | .metadata.name')
            RESTART_COUNT=$(echo "${PODS}" | jq -r ".items[] | select(.metadata.name == \"${POD_NAME}\") | .status.containerStatuses[0].restartCount")
            if [ "${RESTART_COUNT}" != "0" ]; then
              echo "# Previous logs:"
              kubectl -n build-operator logs "${POD_NAME}" --previous || true
            fi
            echo "# Logs:"
            kubectl -n build-operator logs "${POD_NAME}"
